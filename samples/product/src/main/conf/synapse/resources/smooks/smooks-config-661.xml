<?xml version="1.0"?>
<!--
 ~ Copyright (c) 2005-2010, WSO2 Inc. (http://wso2.com) All Rights Reserved.
 ~
 ~ WSO2 Inc. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
<smooks-resource-list xmlns="http://www.milyn.org/xsd/smooks-1.1.xsd" 
		      xmlns:core="http://www.milyn.org/xsd/smooks/smooks-core-1.3.xsd"
                      xmlns:jb="http://www.milyn.org/xsd/smooks/javabean-1.4.xsd"
		      xmlns:ds="http://www.milyn.org/xsd/smooks/datasource-1.3.xsd"
		      xmlns:db="http://www.milyn.org/xsd/smooks/db-routing-1.1.xsd">
 
        <core:filterSettings type="SAX" />

	<!-- Populate java objects to order data... -->
    	<jb:bean beanId="order" class="java.util.Hashtable" createOnElement="order">
		<jb:value property="orderId" decoder="Integer" data="order/@id"/>
		<jb:value property="customerNumber" decoder="Long" data="header/customer/@number"/>
		<jb:value property="customerName" data="header/customer"/>
    	</jb:bean>
 
    	<!-- Populate java objects to order-item data... -->
   	 <jb:bean beanId="orderItem" class="java.util.Hashtable" createOnElement="order-item">
		<jb:value property="itemId" decoder="Integer" data="order-item/@id"/>
		<jb:value property="productId" decoder="Long" data="order-item/product"/>
		<jb:value property="quantity" decoder="Integer" data="order-item/quantity"/>
		<jb:value property="price" decoder="Double" data="order-item/price"/>
    	</jb:bean>

	<!--CHANGE -->
    	<ds:direct bindOnElement="#document"
            datasource="DBExtractTransformLoadDS"
            driver="com.mysql.jdbc.Driver"
            url="jdbc:mysql://localhost:3306/OrdersDB"
            username="smooksuser"
            password="wso2"
            autoCommit="false" />

    	<!-- Assert whether it's an insert or update. Need to do this just before we do the insert/update... -->
    	<db:executor executeOnElement="order-items" datasource="DBExtractTransformLoadDS" executeBefore="true">
		<db:statement>select OrderId from ORDERS where OrderId = ${order.orderId}</db:statement>
		<db:resultSet name="orderExistsRS"/>
    	</db:executor>
 
    	<!-- If it's an insert (orderExistsRS.isEmpty()), insert the order before we process the order items... -->
    	<db:executor executeOnElement="order-items" datasource="DBExtractTransformLoadDS" executeBefore="true">
        	<condition>orderExistsRS.isEmpty()</condition>
        	<db:statement>INSERT INTO ORDERS VALUES(${order.orderId}, ${order.customerNumber}, ${order.customerName})</db:statement>
    	</db:executor>
 
    	<!-- And insert each orderItem... -->
    	<db:executor executeOnElement="order-item" datasource="DBExtractTransformLoadDS" executeBefore="false">
        	<condition>orderExistsRS.isEmpty()</condition>
        	<db:statement>INSERT INTO ORDERITEMS VALUES (${orderItem.itemId}, ${order.orderId}, ${orderItem.productId}, ${orderItem.quantity},${orderItem.price})</db:statement>
    	</db:executor>
 
</smooks-resource-list>
